package log

/*
*
* 
*  ソース元：https://github.com/qiangxue/go-rest-api/blob/c3101332148b4aa45f637605e394cb0d033dae97/pkg/log/logger.go
*  改変：New()にて設定をconfigs/zap.yamlから読み取るように変更
*
*
*
*/

import (
  "gopkg.in/yaml.v2"
  "context"
  "github.com/google/uuid"
  "go.uber.org/zap"
  "go.uber.org/zap/zapcore"
  "go.uber.org/zap/zaptest/observer"
  "net/http"
  "os"
)

// Logger is a logger that supports log levels, context and structured logging.
type Logger interface {
  // With returns a logger based off the root logger and decorates it with the given context and arguments.
  With(ctx context.Context, args ...interface{}) Logger

  // Debug uses fmt.Sprint to construct and log a message at DEBUG level
  Debug(args ...interface{})
  // Info uses fmt.Sprint to construct and log a message at INFO level
  Info(args ...interface{})
  // Error uses fmt.Sprint to construct and log a message at ERROR level
  Error(args ...interface{})

  // Debugf uses fmt.Sprintf to construct and log a message at DEBUG level
  Debugf(format string, args ...interface{})
  // Infof uses fmt.Sprintf to construct and log a message at INFO level
  Infof(format string, args ...interface{})
  // Errorf uses fmt.Sprintf to construct and log a message at ERROR level
  Errorf(format string, args ...interface{})
}

type logger struct {
  *zap.SugaredLogger
}

type contextKey int

const (
  defaultConfigurationFilePath_ = "./configs/zap.yaml"
  developmentConfig_ = 0
  customConfig_ = 1
  requestIDKey contextKey = iota
  correlationIDKey
)

// ロガーを生成
func New() Logger {

  l, configurationType := NewImpl(defaultConfigurationFilePath_)

  switch configurationType {
  case 0:
      l.Debugf("configured by zap.NewDevelopmentConfig()")
  case 1:
      l.Debugf("configured by configuration file")
  } 
  
  return l

}

//テスト用ロガーによるロガーのためのロガーによるログ出力をしない
func SilentNew() Logger {

  l, _ := NewImpl(defaultConfigurationFilePath_)
  
  return l

}

func NewImpl(defaultConfigurationFilePath string) (Logger, int) {

  //https://github.com/uber-go/zap/blob/master/config.go
  //zap.Configを定義。ポインタを含み初期値はnilでありそのままではセグフォする。
  var cfg zap.Config

  //Stat returns the FileInfo structure describing file. If there is an error, it will be of type *PathError.
  _, err := os.Stat(defaultConfigurationFilePath)

  //#region ファイルが不在であればNewDevelopmentConfigでロガーを設定し、返す
  if os.IsNotExist(err) {
    cfg = zap.NewDevelopmentConfig()
    l, _ := cfg.Build()
    return NewWithZap(l), developmentConfig_
  }
  //#endregion

  //#region 設定ファイル`./configs/zap.yaml`でロガーを設定し、返す
  configYaml, err := os.ReadFile(defaultConfigurationFilePath)
  
  if err != nil {
    panic(err)
  }
  
  if err := yaml.Unmarshal(configYaml, &cfg); err != nil {
    panic(err)
  }

  l, _ := cfg.Build()

  return NewWithZap(l), customConfig_
  //#endregion
}

// NewWithZap creates a new logger using the preconfigured zap logger.
func NewWithZap(l *zap.Logger) Logger {
  return &logger{l.Sugar()}
}

// NewForTest returns a new logger and the corresponding observed logs which can be used in unit tests to verify log entries.
func NewForTest() (Logger, *observer.ObservedLogs) {
  core, recorded := observer.New(zapcore.InfoLevel)
  return NewWithZap(zap.New(core)), recorded
}

// With returns a logger based off the root logger and decorates it with the given context and arguments.
//
// If the context contains request ID and/or correlation ID information (recorded via WithRequestID()
// and WithCorrelationID()), they will be added to every log message generated by the new logger.
//
// The arguments should be specified as a sequence of name, value pairs with names being strings.
// The arguments will also be added to every log message generated by the logger.
func (l *logger) With(ctx context.Context, args ...interface{}) Logger {
  if ctx != nil {
    if id, ok := ctx.Value(requestIDKey).(string); ok {
      args = append(args, zap.String("request_id", id))
    }
    if id, ok := ctx.Value(correlationIDKey).(string); ok {
      args = append(args, zap.String("correlation_id", id))
    }
  }
  if len(args) > 0 {
    return &logger{l.SugaredLogger.With(args...)}
  }
  return l
}

// WithRequest returns a context which knows the request ID and correlation ID in the given request.
func WithRequest(ctx context.Context, req *http.Request) context.Context {
  id := getRequestID(req)
  if id == "" {
    id = uuid.New().String()
  }
  ctx = context.WithValue(ctx, requestIDKey, id)
  if id := getCorrelationID(req); id != "" {
    ctx = context.WithValue(ctx, correlationIDKey, id)
  }
  return ctx
}

// getCorrelationID extracts the correlation ID from the HTTP request
func getCorrelationID(req *http.Request) string {
  return req.Header.Get("X-Correlation-ID")
}

// getRequestID extracts the correlation ID from the HTTP request
func getRequestID(req *http.Request) string {
  return req.Header.Get("X-Request-ID")
}